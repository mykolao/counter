{"version":3,"sources":["redux/default-state.ts","local-storage/local-storage.ts","redux/reducer.ts","redux/store.ts","components/Button.tsx","components/Label.tsx","components/Counter.tsx","components/Input.tsx","components/Settings.tsx","components/App.tsx","index.tsx"],"names":["defaultState","min","max","value","status","KEY","LocalStorage","getState","text","localStorage","getItem","JSON","parse","setState","state","str","stringify","setItem","clearState","removeItem","setStatus","type","payload","reducer","resultState","action","Number","store","createStore","Button","disabled","onClick","className","Label","color","size","style","fontSize","Counter","label","incButton","resButton","labelColor","dispatch","useDispatch","useSelector","minValue","maxValue","Input","valid","onValueChange","onChange","e","target","Settings","isMaxValid","Boolean","length","isMinValid","isValid","buttonStatus","inputChangeHandler","isInputValid","isNaN","statusAction","valueAction","setMax","setMin","v","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.431983bd.chunk.js","sourcesContent":["// INITIAL STATE\r\nexport type Status = \"ok\" | \"set\" | \"error\";\r\nexport interface State {\r\n  min: string;\r\n  max: string;\r\n  value: number;\r\n  status: Status;\r\n}\r\n\r\nconst defaultState: State = {\r\n  min: \"0\",\r\n  max: \"3\",\r\n  value: 0,\r\n  status: \"ok\",\r\n};\r\n\r\nexport default defaultState;","import defaultState, { State } from \"../redux/default-state\";\r\n\r\nconst KEY = \"counter-state\";\r\n\r\nconst parseState = (text: string | null): State => {\r\n  return text ? JSON.parse(text) : defaultState;\r\n};\r\n\r\nconst getState = (): State => {\r\n  return parseState(localStorage.getItem(KEY));\r\n};\r\n\r\nconst setState = (state: State): void => {\r\n  let str = JSON.stringify(state);\r\n  localStorage.setItem(KEY, str);\r\n};\r\n\r\nconst clearState = (): void => {\r\n  localStorage.removeItem(KEY);\r\n};\r\n\r\nconst LocalStorage = {\r\n  getState,\r\n  setState,\r\n  clearState,\r\n};\r\n\r\nexport default LocalStorage;\r\n","import LocalStorage from \"../local-storage/local-storage\";\r\nimport { State, Status } from \"./default-state\";\r\n\r\n// ACTION CREATORS\r\nexport const increment = () => ({ type: \"INCREMENT\" } as const);\r\ntype IncAction = ReturnType<typeof increment>;\r\n\r\nexport const reset = () => ({ type: \"RESET\" } as const);\r\ntype ResAction = ReturnType<typeof reset>;\r\n\r\nexport const setStatus = (status: Status) =>\r\n  ({\r\n    type: \"SET_STATUS\",\r\n    payload: { status },\r\n  } as const);\r\ntype SetStatAction = ReturnType<typeof setStatus>;\r\n\r\nexport const setMin = (min: string) =>\r\n  ({\r\n    type: \"SET_MIN\",\r\n    payload: { min },\r\n  } as const);\r\ntype setMinAction = ReturnType<typeof setMin>;\r\n\r\nexport const setMax = (max: string) =>\r\n  ({\r\n    type: \"SET_Max\",\r\n    payload: { max },\r\n  } as const);\r\ntype setMaxAction = ReturnType<typeof setMax>;\r\n\r\ntype Action =\r\n  | IncAction\r\n  | ResAction\r\n  | SetStatAction\r\n  | setMinAction\r\n  | setMaxAction;\r\n\r\n// REDUCER\r\nconst reducer = (\r\n  state: State = LocalStorage.getState(),\r\n  action: Action\r\n): State => {\r\n  let resultState: State;\r\n\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      resultState = {\r\n        ...state,\r\n        value: state.value + 1,\r\n      };\r\n      break;\r\n\r\n    case \"RESET\":\r\n      resultState = {\r\n        ...state,\r\n        value: Number(state.min),\r\n      };\r\n      break;\r\n\r\n    case \"SET_STATUS\":\r\n      const value =\r\n        action.payload.status === \"ok\"\r\n          ? Number(state.min)\r\n          : state.value;\r\n\r\n      resultState = {\r\n        ...state,\r\n        value,\r\n        ...action.payload,\r\n      };\r\n      break;\r\n    case \"SET_MIN\":\r\n    case \"SET_Max\":\r\n      resultState = {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n      break;\r\n\r\n    default:\r\n      resultState = state;\r\n  }\r\n\r\n  LocalStorage.setState(resultState);\r\n  return resultState;\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\nexport default store;","type propsType = {\r\n  value: string;\r\n  disabled: boolean;\r\n  onClick: () => void;\r\n};\r\n\r\nconst Button = ({ value, disabled, onClick }: propsType) => {\r\n  const onClickHandler = () => onClick();\r\n  return (\r\n    <button\r\n      disabled={disabled}\r\n      className={`button ${disabled ? \"disabled\" : \"\"}`}\r\n      onClick={onClickHandler}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","type props = {\r\n  value: number | string;\r\n  color: \"red\" | \"blue\";\r\n  size?: string;\r\n};\r\n\r\nconst Label = ({ value, color, size }: props) => {\r\n  const style = size ? { fontSize: `${size}px` } : {};\r\n\r\n  return (\r\n    <span style={style} className={color}>\r\n      {value}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Label;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { State } from \"../redux/default-state\";\r\nimport { increment, reset } from \"../redux/reducer\";\r\nimport Button from \"./Button\";\r\nimport Label from \"./Label\";\r\n\r\nconst Counter = () => {\r\n  // State\r\n  const dispatch = useDispatch();\r\n  const state = useSelector<State, State>((state) => state);\r\n  const { min, max, value, status } = state;\r\n  const minValue = Number(min);\r\n  const maxValue = Number(max);\r\n\r\n  // Label Type Calculation\r\n  let label, incButton, resButton;\r\n\r\n  let labelColor: \"red\" | \"blue\";\r\n\r\n  switch (status) {\r\n    case \"set\":\r\n      incButton = resButton = false;\r\n\r\n      label = (\r\n        <Label\r\n          size=\"32\"\r\n          value={\"Enter values & press set\"}\r\n          color={\"blue\"}\r\n        />\r\n      );\r\n\r\n      break;\r\n\r\n    case \"ok\":\r\n      labelColor = value === maxValue ? \"red\" : \"blue\";\r\n      incButton = value < maxValue && status === \"ok\";\r\n      resButton = value > minValue;\r\n\r\n      label = <Label value={value} color={labelColor} />;\r\n      break;\r\n\r\n    case \"error\":\r\n      incButton = resButton = false;\r\n\r\n      label = (\r\n        <Label\r\n          size=\"24\"\r\n          value={\"Incorrect Values!\"}\r\n          color={\"red\"}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n\r\n  // Event Handling\r\n  const incrementHandler = () => {\r\n    dispatch(increment());\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    dispatch(reset());\r\n  };\r\n\r\n  return (\r\n    <div className=\"block\">\r\n      <div className=\"section counter-panel\">{label}</div>\r\n      <div className=\"section control-panel\">\r\n        <Button\r\n          value=\"Incr\"\r\n          disabled={!incButton}\r\n          onClick={incrementHandler}\r\n        />\r\n        <Button\r\n          value=\"Reset\"\r\n          disabled={!resButton}\r\n          onClick={resetHandler}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\ninterface props {\r\n  value: string;\r\n  valid: boolean;\r\n  onValueChange: (v: string) => void;\r\n}\r\n\r\nconst Input = ({ value, valid, onValueChange }: props) => {\r\n  const onChangeHandler = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const value = e.target.value;\r\n    onValueChange(value);\r\n  };\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChangeHandler}\r\n      className={valid ? \"input good\" : \"input bad\"}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { State, Status } from \"../redux/default-state\";\r\nimport { setMax, setMin, setStatus } from \"../redux/reducer\";\r\nimport Button from \"./Button\";\r\nimport Input from \"./Input\";\r\n\r\ninterface SettingsState {\r\n  min: string;\r\n  max: string;\r\n  status: Status;\r\n}\r\n\r\nconst Settings = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // Global State\r\n  const state = useSelector<State, SettingsState>(\r\n    ({ min, max, status }) => ({\r\n      min,\r\n      max,\r\n      status,\r\n    })\r\n  );\r\n\r\n  // Validation\r\n  const max = Number(state.max);\r\n  const min = Number(state.min);\r\n\r\n  const isMaxValid =\r\n    max > 0 && max > min && Boolean(state.max.length);\r\n  const isMinValid =\r\n    min >= 0 && min < max && Boolean(state.min.length);\r\n\r\n  const isValid = isMaxValid && isMinValid && max !== min;\r\n  if (state.status === \"error\" && isValid) {\r\n    dispatch(setStatus(\"set\"));\r\n  } else if (state.status !== \"error\" && !isValid) {\r\n    dispatch(setStatus(\"error\"));\r\n  }\r\n\r\n  const buttonStatus = state.status === \"set\" ? false : true;\r\n\r\n  // Event Handlers\r\n  const inputChangeHandler = (\r\n    value: string,\r\n    type: \"max\" | \"min\"\r\n  ) => {\r\n    const isInputValid = Boolean(\r\n      value.length && !isNaN(+value)\r\n    );\r\n    const statusAction = isInputValid\r\n      ? setStatus(\"set\")\r\n      : setStatus(\"error\");\r\n\r\n    let valueAction =\r\n      type === \"max\" ? setMax(value) : setMin(value);\r\n\r\n    dispatch(valueAction);\r\n    dispatch(statusAction);\r\n  };\r\n\r\n  const onButtonClickHandler = () => {\r\n    dispatch(setStatus(\"ok\"));\r\n  };\r\n\r\n  return (\r\n    <div className=\"block\">\r\n      <div className=\"section input-panel\">\r\n        <div className=\"input-label\">Max Value</div>\r\n        <Input\r\n          value={state.max}\r\n          valid={isMaxValid}\r\n          onValueChange={(v) => {\r\n            inputChangeHandler(v, \"max\");\r\n          }}\r\n        />\r\n        <div className=\"input-label\">Min Value</div>\r\n        <Input\r\n          value={state.min}\r\n          valid={isMinValid}\r\n          onValueChange={(v) => {\r\n            inputChangeHandler(v, \"min\");\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"section control-panel\">\r\n        <Button\r\n          disabled={buttonStatus}\r\n          value=\"Set\"\r\n          onClick={onButtonClickHandler}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import { Provider } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport store from \"../redux/store\";\r\nimport Counter from \"./Counter\";\r\nimport Settings from \"./Settings\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"app-container\">\r\n        <Settings />\r\n        <Counter />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}