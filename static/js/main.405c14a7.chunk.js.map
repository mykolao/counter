{"version":3,"sources":["components/Input/index.tsx","components/Button/index.tsx","components/Label/index.tsx","components/Counter/index.tsx","components/Settings/index.tsx","components/App.tsx","index.tsx"],"names":["inputStatus","Button","value","disabled","onClick","className","Label","color","size","style","fontSize","Counter","label","incButton","resButton","labelColor","status","limits","onCounterChange","minValue","maxValue","Input","onValueChange","min","type","onChange","e","Number","target","Settings","values","onSet","onError","useState","state","setState","max","isValid","changeHandler","minInputStatus","good","bad","maxInputStatus","setButton","val","item","localStorage","getItem","split","map","n","getLimits","initialState","App","setItem","String","setLimits","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.405c14a7.chunk.js","sourcesContent":["import { ChangeEvent } from \"react\";\r\n\r\nexport enum inputStatus {\r\n  good = \"good\",\r\n  bad = \"bad\",\r\n}\r\ninterface props {\r\n  value: number;\r\n  status: inputStatus;\r\n  onValueChange: (v: number) => void;\r\n}\r\n\r\nconst Input = ({ value, status, onValueChange }: props) => {\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) =>\r\n    onValueChange(Number(e.target.value));\r\n\r\n  return (\r\n    <input\r\n      min={0}\r\n      className={`input ${status}`}\r\n      value={value}\r\n      type=\"number\"\r\n      onChange={onChangeHandler}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\ntype propsType = {\r\n  value: string;\r\n  disabled: boolean;\r\n  onClick: () => void;\r\n};\r\n\r\nconst Button = ({ value, disabled, onClick }: propsType) => {\r\n  const onClickHandler = () => onClick();\r\n  return (\r\n    <button\r\n      disabled={disabled}\r\n      className={`button ${disabled ? \"disabled\" : \"\"}`}\r\n      onClick={onClickHandler}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","type props = {\r\n  value: number | string;\r\n  color: \"red\" | \"blue\";\r\n  size?: string;\r\n};\r\n\r\nconst Label = ({ value, color, size }: props) => {\r\n  const style = size ? { fontSize: `${size}px` } : {};\r\n\r\n  return (\r\n    <span style={style} className={color}>\r\n      {value}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Label;\r\n","import { CounterState } from \"../App\";\r\nimport Button from \"../Button\";\r\nimport Label from \"../Label\";\r\n\r\nexport type counterStatus = \"ok\" | \"set\" | \"error\";\r\ninterface props extends CounterState {\r\n  onCounterChange: (value: number) => void;\r\n}\r\n\r\nconst Counter = ({\r\n  value,\r\n  status,\r\n  limits,\r\n  onCounterChange,\r\n}: props) => {\r\n  const [minValue, maxValue] = limits;\r\n\r\n  const incrementHandler = () => onCounterChange(value + 1);\r\n  const resetHandler = () => onCounterChange(minValue);\r\n\r\n  let label, incButton, resButton;\r\n\r\n  let labelColor: \"red\" | \"blue\";\r\n\r\n  switch (status) {\r\n    case \"set\":\r\n      incButton = resButton = false;\r\n\r\n      label = (\r\n        <Label\r\n          size=\"32\"\r\n          value={\"Enter values & press set\"}\r\n          color={\"blue\"}\r\n        />\r\n      );\r\n\r\n      break;\r\n\r\n    case \"ok\":\r\n      labelColor = value === maxValue ? \"red\" : \"blue\";\r\n      incButton = value < maxValue && status === \"ok\";\r\n      resButton = value > minValue;\r\n\r\n      label = <Label value={value} color={labelColor} />;\r\n      break;\r\n\r\n    case \"error\":\r\n      incButton = resButton = false;\r\n\r\n      label = (\r\n        <Label\r\n          size=\"24\"\r\n          value={\"Incorrect Values!\"}\r\n          color={\"red\"}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className=\"block\">\r\n      <div className=\"section counter-panel\">{label}</div>\r\n      <div className=\"section control-panel\">\r\n        <Button\r\n          value=\"Incr\"\r\n          disabled={!incButton}\r\n          onClick={incrementHandler}\r\n        />\r\n        <Button\r\n          value=\"Reset\"\r\n          disabled={!resButton}\r\n          onClick={resetHandler}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","import { useState } from \"react\";\r\nimport { CounterLimits } from \"../App\";\r\nimport Button from \"../Button\";\r\nimport Input, { inputStatus } from \"../Input\";\r\n\r\ninterface props {\r\n  values: CounterLimits;\r\n  onChange: () => void;\r\n  onError: () => void;\r\n  onSet: (v: CounterLimits) => void;\r\n}\r\n\r\nconst Settings = ({\r\n  values,\r\n  onChange,\r\n  onSet,\r\n  onError,\r\n}: props) => {\r\n  const [state, setState] = useState<CounterLimits>(values);\r\n  const [min, max] = state;\r\n\r\n  const isValid = min < max;\r\n\r\n  const setHandler = () => onSet(state);\r\n  const changeHandler = () => onChange();\r\n\r\n  const minInputChangeHandler = (val: number) => {\r\n    if (val >= max) onError();\r\n    else changeHandler();\r\n    setState([val, state[1]]);\r\n  };\r\n\r\n  const minInputStatus = isValid\r\n    ? inputStatus.good\r\n    : inputStatus.bad;\r\n\r\n  const maxInputChangeHandler = (val: number) => {\r\n    if (val <= min) onError();\r\n    else changeHandler();\r\n\r\n    setState([state[0], val]);\r\n  };\r\n\r\n  const maxInputStatus = isValid\r\n    ? inputStatus.good\r\n    : inputStatus.bad;\r\n\r\n  const setButton = isValid && state !== values;\r\n  return (\r\n    <div className=\"block\">\r\n      <div className=\"section input-panel\">\r\n        <div className=\"input-label\">Max Value</div>\r\n        <Input\r\n          value={state[1]}\r\n          status={maxInputStatus}\r\n          onValueChange={maxInputChangeHandler}\r\n        />\r\n        <div className=\"input-label\">Min Value</div>\r\n        <Input\r\n          value={state[0]}\r\n          status={minInputStatus}\r\n          onValueChange={minInputChangeHandler}\r\n        />\r\n      </div>\r\n      <div className=\"section control-panel\">\r\n        <Button\r\n          disabled={!setButton}\r\n          value=\"Set\"\r\n          onClick={setHandler}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Counter from \"./Counter\";\r\nimport Settings from \"./Settings\";\r\n\r\n// Types\r\nexport type CounterLimits = number[];\r\nexport type CounterStatus = \"ok\" | \"set\" | \"error\";\r\nexport interface CounterState {\r\n  value: number;\r\n  limits: CounterLimits;\r\n  status: CounterStatus;\r\n}\r\n\r\nconst getLimits = (): CounterLimits => {\r\n  const item = localStorage.getItem(\"counter-limits\");\r\n\r\n  return item == null\r\n    ? [0, 1]\r\n    : item.split(\",\").map((n) => Number(n));\r\n};\r\n\r\nconst setLimits = (state: CounterLimits) =>\r\n  localStorage.setItem(\"counter-limits\", String(state));\r\n\r\nconst limits = getLimits();\r\nconst initialState: CounterState = {\r\n  limits,\r\n  value: limits[0],\r\n  status: \"ok\",\r\n};\r\n\r\nfunction App() {\r\n  const [state, setState] =\r\n    useState<CounterState>(initialState);\r\n\r\n  const onSetHandler = (limits: CounterLimits) => {\r\n    setLimits(limits);\r\n    setState({ value: limits[0], limits, status: \"ok\" });\r\n  };\r\n\r\n  const onChangeHandler = () => {\r\n    setState({ ...state, status: \"set\" });\r\n  };\r\n\r\n  const onErrorHandler = () => {\r\n    setState({ ...state, status: \"error\" });\r\n  };\r\n\r\n  const onCounterChangeHandler = (value: number) =>\r\n    setState({ ...state, value });\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Settings\r\n        values={state.limits}\r\n        onSet={onSetHandler}\r\n        onError={onErrorHandler}\r\n        onChange={onChangeHandler}\r\n      />\r\n      <Counter\r\n        value={state.value}\r\n        status={state.status}\r\n        limits={state.limits}\r\n        onCounterChange={onCounterChangeHandler}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}